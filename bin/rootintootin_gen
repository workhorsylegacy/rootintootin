#!/usr/bin/env python2.6
# -*- coding: UTF-8 -*-
#-------------------------------------------------------------------------------
#
#    This file is part of the Rootin Tootin web framework and licensed under the
#    GPL version 3 or greater. See the COPYRIGHT file for copyright information.
#    This project is hosted at http://rootin.toot.in .
#
#-------------------------------------------------------------------------------

import os, sys, re
from lib_rootintootin import *

def print_usage():
	print "The gen script generates code, databases, and config files:"
	print ""
	print "./gen create noun [singular:user] [plural:users]"
	print "./gen create migration [name] [field:type] ..."
	print "./gen create scaffold [name] [field:type] ..."
	print "    types: boolean, date, datetime, decimal, decimal[18,2]"
	print "    more: float, integer, string, text, time, timestamp'"
	print "./gen migrate [production|development]"
	print "./gen configure [production|development] database [user:root] [password:password] [host:location] [name:db_name]"
	print "./gen configure [production|development] server [port:number] [max_waiting_clients:number] [header_max_size:number]"
	print "./gen create [production|development] database"
	print "./gen drop [production|development] database"
	print "./gen recreate [production|development] database"
	exit(1)

# Make sure the first arg is a path
if len(sys.argv) < 2:
	print_usage()
elif not os.path.exists(sys.argv[1]):
	print "The path '" + sys.argv[1] + "' does not exist. Exiting ..."
	exit(1)

# Move the path to the location of the original caller script
os.chdir(sys.argv[1])
generator = Generator()

# create [production|development] database
if re.match("^create (production|development) database$", str.join(' ', sys.argv[2:])):
	mode = str.join(' ', sys.argv[2:]).lstrip("create").strip("database").strip()
	generator.set_mode(mode)
	generator.create_database()

# drop [production|development] database
elif re.match("^drop (production|development) database$", str.join(' ', sys.argv[2:])):
	mode = str.join(' ', sys.argv[2:]).lstrip("drop").strip("database").strip()
	generator.set_mode(mode)
	generator.drop_database()

# recreate [production|development] database
elif re.match("^recreate (production|development) database$", str.join(' ', sys.argv[2:])):
	mode = str.join(' ', sys.argv[2:]).lstrip("recreate").strip("database").strip()
	generator.set_mode(mode)
	generator.drop_database()
	generator.create_database()

# create migration [name] [field:type] ...
elif str.join(' ', sys.argv[2:4]) == "create migration":
	model_name = sys.argv[4]
	generator.check_pluralization(model_name)
	generator.create_migration(model_name, sys.argv[5:])

# create scaffold [name] [field:type] ...
elif str.join(' ', sys.argv[2:4]) == "create scaffold":
	# Get all the pairs
	pairs = []
	for pair in sys.argv:
		if pair == 'validates': break
		pairs.append(pair)

	# Convert any validation to long format
	i = 0
	while i < len(sys.argv):
		if sys.argv[i].startswith('presence_of:'):
			names = sys.argv[i].split(':')[1].split(',')
			sys.argv.pop(i)
			for name in names:
				sys.argv.insert(i, 'presence_of:' + name)
				i += 1
		else:
			i += 1

	controller_name = sys.argv[4]
	generator.check_pluralization(controller_name)
	generator.create_scaffold(controller_name, pairs[5:])
	generator.create_model(controller_name, sys.argv[5:])
	generator.create_migration(controller_name, pairs[5:])
	generator.configure_routes(controller_name, pairs[4:])

# migrate [production|development]
elif re.match("^migrate (production|development)$", str.join(' ', sys.argv[2:])):
	mode = str.join(' ', sys.argv[2:]).lstrip("migrate").strip()
	generator.set_mode(mode)
	generator.migrate()

# configure [production|development] database [user:root] [password:password] \
#						[host:location] [name:db_name]
elif re.match("^configure (production|development) database$", str.join(' ', sys.argv[2:5])):
	mode = sys.argv[3]
	generator.set_mode(mode)
	generator.configure_database(sys.argv[5:])

# configure [production|development] server [port:number] [max_waiting_clients:number] \
#					[header_max_size:number]
elif re.match("^configure (production|development) server$", str.join(' ', sys.argv[2:5])):
	mode = sys.argv[3]
	generator.set_mode(mode)
	generator.configure_server(sys.argv[5:])

# create noun [singular:user] [plural:users]
elif str.join(' ', sys.argv[2:4]) == "create noun":
	generator.create_noun(sys.argv[4:])

else:
	print_usage()
'''
create model [name] [field:type] ...
drop model [name]
rename model [name] to [name]
alter model [name] name_of_migration

add field [field:type] to [name]
remove field [field] from [name]
rename field [field] to [field] from [name]
alter field [field] from [name] name_of_migration
'''
