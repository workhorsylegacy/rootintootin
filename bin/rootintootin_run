#!/usr/bin/env python2.6
# -*- coding: UTF-8 -*-
#-------------------------------------------------------------------------------
#
#    This file is part of the Rootin Tootin web framework and licensed under the
#    GPL version 2 or greater. See the COPYRIGHT file for copyright information.
#    This project is hosted at http://rootin.toot.in .
#
#-------------------------------------------------------------------------------

import os, sys, shutil
import errno
import functools
import socket
from tornado import ioloop, iostream
from lib_rootintootin import *

# Make sure the first arg is a path
if len(sys.argv) != 2:
	print "usage: ./build 'working directory'"
	exit(1)
elif not os.path.exists(sys.argv[1]):
	print "The path '" + sys.argv[1] + "' does not exist. Exiting ..."
	exit(1)

# Move the path to the location of the current file
os.chdir(os.sys.path[0])

def generate_run(routes, table_map, reference_map):
	generator = Generator()

	# Get the names of all the controllers
	controller_names = []
	for entry in os.listdir('app/controllers/'):
		if entry.endswith('.d'):
			controller_names.append(str.split(entry, '_controller.d')[0])

	# Get the names of all the views
	view_names = []
	for controller_name in controller_names:
		for entry in os.listdir('app/views/' + controller_name):
			if entry.endswith('.html.ed'):
				view_names.append('view_' + controller_name + '_' + str.split(entry, '.html.ed')[0])

	# Open the output file
	out_file = open('run.d', 'w')

	# Write the imports
	out_file.write(
		"\n" +
		"private import tango.text.convert.Integer;\n" +
		"private import tango.text.Util;\n" +
		"private import tango.io.Stdout;\n" +
		"private import tango.time.chrono.Gregorian;\n" +
		"private import tango.time.WallClock;\n" +

		"\n" +
		"private import language_helper;\n" +
		"private import helper;\n" +
		"private import rootintootin;\n" +
		"private import rootintootin_server;\n" +
		"private import ui;\n\n"
	)

	for controller_name in controller_names:
		out_file.write("private import " + controller_name + "_controller;\n")
	out_file.write("\n")

	for view_name in view_names:
		out_file.write("private import " + view_name + ";\n")
	out_file.write("\n")

	# Write the runner class
	out_file.write(
	"public class Runner : RunnerBase {\n")

	# Write the render view function
	for controller, actions in routes.items():
		out_file.write(
		"	private string render_view(" + controller.capitalize() + "Controller controller, string controller_name, string view_name) {\n")

		out_file.write(
		"		if(controller_name == \"" + generator.pluralize(controller) + "\") {\n")

		all_actions = {}
		all_actions.update(actions['member'])
		all_actions.update(actions['collection'])
		for action, method in all_actions.items():
			if method == "get":
				out_file.write(
				"			if(view_name == \"" + action.capitalize() + "\" || view_name == \"" + action.lower() + "\") {\n" +
				"				return " + controller.capitalize() + action.capitalize() + "View.render(controller);\n"
				)

				out_file.write("			}\n")

		out_file.write("		}\n")
		out_file.write("		return \"Unknown view '\" ~ view_name ~ \"'\";\n")
		out_file.write("	}\n")


	# Write the run action function
	out_file.write(
	"	public string run_action(Request request, string controller_name, string action_name, string id, out string[] events_to_trigger) {\n")
	for controller, actions in routes.items():
		out_file.write(
		"		if(controller_name == \"" + generator.pluralize(controller) + "\") {\n" +
		"			" + controller.capitalize() + "Controller controller = new " + controller.capitalize() + "Controller();\n" + 
		"			controller.action_name = action_name;\n" + 
		"			controller.controller_name = controller_name;\n" + 
		"			controller.request = request;\n" + 
		"			try {\n" +
		"\n"
		)

		all_actions = {}
		all_actions.update(actions['member'])
		all_actions.update(actions['collection'])
		for action, method in all_actions.items():
			real_action = action
			if action == "new":
				real_action = "New"
			elif action == "delete":
				real_action = "Delete"
			out_file.write(
			"				if(action_name == \"" + action + "\") {\n" + 
			"					controller." + real_action + "();\n"
			)

			if method == "get":
				out_file.write(
				"					return this.render_view(controller, controller_name, action_name);\n"
				)
			else:
				out_file.write(
				"					return null;\n"
				)
			out_file.write(
				"				}\n")

		out_file.write(
			"			} catch(ManualRenderException err) {\n" + 
			"				if(err._response_type == ResponseType.render_view) {\n" + 
			"					return this.render_view(controller, controller_name, err._payload);\n" + 
			"				} else {\n" + 
			"					throw err;\n" + 
			"				}\n" + 
			"			} finally {\n" + 
			"				events_to_trigger = controller._events_to_trigger;\n" + 
			"			}\n")
		out_file.write("		}\n")

	out_file.write("		return null;\n")
	out_file.write("	}\n")
	out_file.write("}\n")

	port = str(int(globals()['server_configuration']['port']) + 1)
	max_connections = globals()['server_configuration']['max_connections']
	max_threads = globals()['server_configuration']['max_threads']
	header_max_size = globals()['server_configuration']['header_max_size']
	db_host = globals()['database_configuration']['host']
	db_user = globals()['database_configuration']['user']
	db_password = globals()['database_configuration']['password']
	db_name = globals()['database_configuration']['name']

	# Write the main function
	out_file.write(
	"\n\nint main() {\n" + 
	"	ushort port = " + port + ";\n" + 
	"	int max_waiting_clients = " + str(max_connections) + ";\n" + 
	"	char[" + str(header_max_size) + "] buffer;\n" + 
	"	RunnerBase runner = new Runner();\n" + 
	"\n" + 
	"	auto server = new RootinTootinServer(runner, \n" + 
	"				port, max_waiting_clients, buffer, \n" + 
	"				\"" + db_host + "\", \"" + db_user + "\", \n" + 
	"				\"" + db_password + "\", \"" + db_name + "\");\n" + 
	"	server.start();\n" + 
	"\n" +
	"	return 0;\n" +
	"}\n")

def model_generated_properties_class(model_name, model_map, reference_map, model_names):
	generator = Generator()
	# Add class opening
	properties = "private import rootintootin;\n"

	for entry in model_names:
		properties += "private import " + entry + ";\n"
		if model_name != entry:
			properties += "private import " + entry + "_base;\n"
	properties += "\n"

	properties += "public class " + model_name.capitalize() + "Base : ModelBase {\n"
	properties += "	mixin ModelBaseMixin!(" + model_name.capitalize() + ", \"" + model_name + "\", \""+ generator.pluralize(model_name) + "\");\n\n"

	# Add a list of all field names
	properties += "	protected static string[] _field_names = ["
	for field, values in model_map.items():
		properties += "\"" + field + "\", ";
	properties += "];\n\n";

	# Add a list of the unique field names
	properties += "	protected static string[] _unique_field_names = ["
	for field, values in model_map.items():
		if field == "id":
			continue
		properties += "\"" + field + "\", ";
	properties += "];\n\n";

	# Add all the fields
	for field, values in model_map.items():
		if not field.endswith('_id'):
			properties += "	protected " + sql_type_to_d_type(values['type']) + " _" + field + ";\n"

	# Add the field properties
	for field, values in model_map.items():
		if field.endswith('_id'):
			continue

		# Add getter
		properties += \
						"	// " + values['type'] + "\n" + \
						"	public " + sql_type_to_d_type(values['type']) + " " + field + "() {\n" + \
						"		ensure_was_pulled_from_database();\n" + \
						"		return _" + field + ";\n" + \
						"	}\n"
		# Add setter, but not for id
		if field != 'id':
			properties += \
						"	public void " + field + "(" + sql_type_to_d_type(values['type']) + " value) {\n" + \
						"		ensure_was_pulled_from_database();\n" + \
						"		_" + field + " = value;\n" + \
						"	}\n"

	# Add the belongs_to references
	for table_name, has_manys in reference_map.iteritems():
		table_name = table_name[:-1]
		for has_many in has_manys:
			if has_many[:-1] == model_name:
				properties += \
						"	protected " + table_name.capitalize() + "Base _" + table_name + " = null;\n" + \
						"\n" + \
						"	public void parent(" + table_name.capitalize() + "Base value) {\n" + \
						"		ensure_was_pulled_from_database();\n" + \
						"		_" + table_name + " = value;\n" + \
						"	}\n" + \
						"	public " + table_name.capitalize() + "Base parent() {\n" + \
						"		ensure_was_pulled_from_database();\n" + \
						"		return _" + table_name + ";\n" + \
						"	}\n"
	
	# Add the has_many references
	table_name = generator.pluralize(model_name)
	if table_name in reference_map:
		for has_many in reference_map[table_name]:
			has_many = has_many[:-1]
			has_manies = generator.pluralize(has_many)
			properties += \
					"	protected class " + has_many.capitalize() + "s {\n" + \
					"		mixin ModelArrayMixin!(" + model_name.capitalize() + "Base, \n" + \
					"								" + has_many.capitalize() + "Base);\n" + \
					"	}\n" + \
					"\n" + \
					"	protected " + has_manies.capitalize() + " _" + has_manies + ";\n\n" + \
					"	public void after_this() {\n" + \
					"		_" + has_manies + " = new " + has_manies.capitalize() + "(\n" + \
 					"		" + has_many.capitalize() + "Base.find_all(_model_name ~ \"_id = \" ~ to_s(_id))\n" + \
					"		);\n" + \
					"	}\n\n" + \
					"	public void " + has_manies + "(" + has_manies.capitalize() + " value) {\n" + \
					"		ensure_was_pulled_from_database();\n" + \
					"		_" + has_manies + " = value;\n" + \
					"	}\n" + \
					"	public " + has_manies.capitalize() + " " + has_manies + "() {\n" + \
					"		ensure_was_pulled_from_database();\n" + \
					"		return _" + has_manies + ";\n" + \
					"	}\n"


	# Add the set_field_by_name method
	properties += \
				"	public void set_field_by_name(string field_name, string value, bool must_check_database_first = true) {\n" + \
				"		if(must_check_database_first)\n" + \
				"			ensure_was_pulled_from_database();\n\n" + \
				"		switch(field_name) {\n"

	for field, values in model_map.items():
		if field.endswith('_id'):
			reference_type = field.split('_id')[0]
			value_with_cast = convert_string_to_d_type(sql_type_to_d_type(values['type']), 'value')
			properties += \
					"			case \"" + field + "\":\n" + \
					"				_" + reference_type + " = new " + reference_type.capitalize() + "();\n" + \
					"				_" + reference_type + ".set_field_by_name(\"id\", value, false);\n" + \
					"				_" + reference_type + "._was_pulled_from_database = false;\n" + \
					"				break;\n"
		else:
			value_with_cast = convert_string_to_d_type(sql_type_to_d_type(values['type']), 'value')
			properties += \
					"			case \"" + field + "\":\n" + \
					"				_" + field + " = " + value_with_cast + ";\n" + \
					"				break;\n"

	properties += \
				"			default:\n" + \
				"				break;\n" + \
				"		}\n" + \
				"	}\n"

	# Add the get_field_by_name method
	properties += \
				"	public string get_field_by_name(string field_name) {\n" + \
				"		switch(field_name) {\n"

	# tango.text.convert.Integer.parse.toString
	for field, values in model_map.items():
		if field.endswith('_id'):
			reference_type = field.split('_id')[0]
			value_to_string = convert_d_type_to_string(sql_type_to_d_type(values['type']), "_" + field)
			properties += \
					"			case \"" + field + "\":\n" + \
					"				return _" + reference_type + " is null ? null : to_s(_" + reference_type + ".id);\n"
		else:
			value_to_string = convert_d_type_to_string(sql_type_to_d_type(values['type']), "this." + field)
			properties += \
					"			case \"" + field + "\":\n" + \
					"				return " + value_to_string + ";\n"

	properties += \
				"			default:\n" + \
				"				break;\n" + \
				"		}\n" + \
				"		return null;\n" + \
				"	}\n"

	# Add class closing
	properties += "}"

	return properties


def generate_models():
	# Connect to the database
	generator = Generator()
	db = MySQLdb.connect(host = globals()['database_configuration']['host'], 
						user = globals()['database_configuration']['user'], 
						passwd = globals()['database_configuration']['password'], 
						db = globals()['database_configuration']['name'])

	# Get all the tables
	table_map = {}
	cursor = db.cursor()
	cursor.execute("show tables;")
	result = cursor.fetchall()
	for row in result:
		table_map[row[0]] = {}
	cursor.close()

	# Get the fields for each table
	for table in table_map:
		cursor = db.cursor()
		cursor.execute('desc ' + table + ';')
		result = cursor.fetchall()

		for row in result:
			field = row[0]

			table_map[table][field] = {}
			table_map[table][field]['type'] = row[1]
			table_map[table][field]['null'] = row[2]
			table_map[table][field]['key'] = row[3]
			table_map[table][field]['default'] = row[4]
			table_map[table][field]['extra'] = row[5]

		cursor.close()

	# Add the relationships to the table
	reference_map = {}
	for table, fields in table_map.items():
		cursor = db.cursor()
		query = "select column_name, referenced_table_name, referenced_column_name from " + \
				"information_schema.key_column_usage where " + \
				"table_schema='" + globals()['database_configuration']['name'] + "' " + \
				"and table_name='" + table + "' and " + \
				"referenced_table_name is not null and referenced_column_name is not null;"
		cursor.execute(query)
		result = cursor.fetchall()

		for row in result:
			column_name, referenced_table_name, referenced_column_name = row
			if not referenced_table_name in reference_map:
				reference_map[referenced_table_name] = []
			reference_map[referenced_table_name].append(table)

		cursor.close()

	# Get the names of all the models
	model_names = []
	for entry in os.listdir('app/models/'):
		if entry.endswith('.d'):
			model_names.append(str.split(entry, '.')[0])

	# Write the generated model base classes into the files
	for model_name in model_names:
		model_map = table_map[generator.pluralize(model_name)]

		with open(model_name + '_base.d', 'w') as f:
			f.write("\n\n")
			f.write(model_generated_properties_class(model_name, model_map, reference_map, model_names))
			f.write("\n\n")

		with open('app/models/' + model_name + '.d', 'r') as f_in:
			with open(model_name + '.d', 'w') as f_out:
				f_out.write(f_in.read())

	return table_map, reference_map

def generate_controllers():
	for controller in os.listdir('app/controllers/'):
		if not controller.endswith('.d'):
			continue

		with open('app/controllers/' + controller, 'r') as f_in:
			with open(controller, 'w') as f_out:
				f_out.write(f_in.read())

def generate_views(routes):
	# Get the names of all the models
	model_names = []
	for entry in os.listdir('app/models/'):
		if entry.endswith('.d'):
			model_names.append(str.split(entry, '.')[0])

	# Get the names of all the controllers
	controller_names = []
	for entry in os.listdir('app/controllers/'):
		if entry.endswith('.d'):
			controller_names.append(str.split(entry, '.')[0])

	for controller, actions in routes.items():
		all_actions = {}
		all_actions.update(actions['member'])
		all_actions.update(actions['collection'])
		for member, http_method in all_actions.items():
			# If there is no template, then skip it
			if not os.path.exists('app/views/' + controller + '/' + member + '.html.ed'):
				continue

			# Get the template file as a string
			f = open('app/views/' + controller + '/' + member + '.html.ed', 'r')
			body = f.read()
			f.close()

			# Print the openining of the function
			output = []
			output.append(
			"private import rootintootin;\n" +
			"private import ui;\n")

			for model_name in model_names:
				output.append("private import " + model_name + ";\n")

			for controller_name in controller_names:
				output.append("private import " + controller_name + ";\n")

			output.append(
			"private import view_layouts_default;\n\n" +
			"public class " + controller.capitalize() + member.capitalize() + "View { \n" +
			"public static string render(" + controller.capitalize() + "Controller controller) { \n" +
			"	// Generate the view as an array of strings\n" +
			"	AutoStringArray builder = new AutoStringArray();")

			process_template_body(body, output)

			# Print the closing of the function
			output.append(
			"\n" +
			"	if(controller.use_layout) {\n" + 
			"		return DefaultLayout.render(controller, tango.text.Util.join(builder.value, \"\")); \n" + 
			"	} else {\n" + 
			"		return tango.text.Util.join(builder.value, \"\"); \n" + 
			"	}\n"
			"}\n" +
			"}\n")

			# Save the output as a D file
			out_file = open('view_' + controller + '_' + member + '.d', 'w')
			for fragment in output:
				out_file.write(fragment)
			out_file.close()

def generate_layouts():
	for layout in os.listdir('app/views/layouts/'):
		if not layout.endswith('.html.ed'):
			continue
		layout = layout[0:-8]

		# Get the layout file as a string
		f = open('app/views/layouts/' + layout + '.html.ed', 'r')
		body = f.read()
		f.close()

		# Print the openining of the function
		output = []
		output.append(
		"private import rootintootin;\n" +
		"private import ui;\n" +
		"public class " + layout.capitalize() + "Layout { \n" +
		"public static string render(ControllerBase controller, string yield) { \n" +
		"	// Generate the layout as an array of strings\n" +
		"	AutoStringArray builder = new AutoStringArray();")

		process_template_body(body, output)

		# Print the closing of the function
		output.append(
		"\n	return tango.text.Util.join(builder.value, \"\"); \n" +
		"}\n" +
		"}\n")

		# Save the output as a D file
		out_file = open('view_layouts_' + layout + '.d', 'w')
		for fragment in output:
			out_file.write(fragment)
		out_file.close()

def get_link_files():
	files = []

	# Get the names of all the models
	model_names = []
	for entry in os.listdir('app/models/'):
		if entry.endswith('.d'):
			model_names.append(str.split(entry, '.')[0])

	# Get the names of all the controllers
	controller_names = []
	for entry in os.listdir('app/controllers/'):
		if entry.endswith('.d'):
			controller_names.append(str.split(entry, '_controller.d')[0])

	# Get the names of all the views
	view_names = []
	for controller_name in controller_names:
		for entry in os.listdir('app/views/' + controller_name):
			if entry.endswith('.html.ed'):
				view_names.append('view_' + controller_name + '_' + str.split(entry, '.html.ed')[0])

	for model_name in model_names:
		files.append(model_name + '_base.d')
	for model_name in model_names:
		files.append(model_name + '.d')
	for controller_name in controller_names:
		files.append(controller_name + '_controller.d')
	for view_name in view_names:
		files.append(view_name + '.d')
	files.append('view_layouts_default.d')

	return files

def process_template_body(body, output):
	while len(body) > 0:
		# Get the location on the open and close brackets
		open_index = body.find("<%")
		close_index = body.find("%>")

		# raise if open but no close
		# raise if close before open

		# If there were no brackets, just print the last text as a string
		if open_index == -1 and close_index == -1:
			output.append("\n	builder ~= \"" + body.replace("\"", "\\\"") + "\"; ")
			break

		# Get the text before, after, and in between the brackets
		before = body[: open_index]
		middle = body[open_index+2 : close_index]
		after = body[close_index+2 :]

		# If there was text before the opening, print it as a string
		if len(before) > 0:
			output.append("\n	builder ~= \"" + before.replace("\"", "\\\"") + "\"; ")

		# Print the code between the brackets
		if len(middle) > 0:
			if middle[0] == "=":
				output.append("\n	builder ~= " + middle[1:] + ";")
			else:
				output.append("\n	" + middle)

		# Set the remaining text as the body, so it can be processed next
		body = after

class BufferServer(object):
	def __init__(self):
		self._io_loop = None
		self._port = None

	def connection_ready(self, sock, fd, events):
		while True:
			try:
				connection, address = sock.accept()
			except socket.error, e:
				if e[0] not in (errno.EWOULDBLOCK, errno.EAGAIN):
					raise
				return
			#connection.setblocking(0)

			# Get the request
			request = connection.recv(1024 * 8)

			# Write the request to the rootin tootin server
			# and read the response back
			client = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0);
			client.connect(('0.0.0.0', self._port+1))
			client.send(request)
			response = client.recv(1024 * 8)
			client.close()

			# Write the response to the client
			stream = iostream.IOStream(connection)
			stream.write(response, stream.close)

	def start(self):
		self._setup_app()

		# Create a new tcp socket that is nonblocking, and
		# can reuse dangling addresses.
		sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
		sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		sock.setblocking(0)
		sock.bind(('', self._port))
		sock.listen(10000)

		# Create a tornado loop that uses our 
		# socket and callback to process requests
		self._io_loop = ioloop.IOLoop.instance()
		callback = functools.partial(self.connection_ready, sock)
		self._io_loop.add_handler(sock.fileno(), callback, self._io_loop.READ)

		# Exit the tornado loop if ctrl + c is pressed.
		try:
			print "Buffer Server running on http://localhost:" + str(self._port)
			self._io_loop.start()
		except KeyboardInterrupt:
			self.stop()

	def stop(self):
		if self._io_loop:
			self._io_loop.stop()
		print "Exiting ..."

	def _setup_app(self):
		# Copy all the framework and app files into a scratch dir
		rootintootin_dir = os.path.expanduser('~/.rootintootin')
		project_name = sys.argv[1].split('/')[-1]
		pwd = sys.argv[1]
		scratch = rootintootin_dir + '/' + project_name + '/scratch/'

		if not os.path.exists(rootintootin_dir):
			os.mkdir(rootintootin_dir)
		if os.path.exists(scratch):
			shutil.rmtree(scratch)
		shutil.copytree(os.sys.path[0]+'/../src/', scratch)

		if os.path.exists(pwd+'/app/'):
			shutil.copytree(pwd+'/app/', scratch+'app/')
		if os.path.exists(pwd+'/config/'):
			shutil.copytree(pwd+'/config/', scratch+'config/')
		if os.path.exists(pwd+'/db/'):
			shutil.copytree(pwd+'/db/', scratch+'db/')
		if os.path.exists(pwd+'/public/'):
			shutil.copytree(pwd+'/public/', scratch+'public/')
		os.chdir(scratch)

		# Load the config files
		exec_file("config/routes.py", globals(), locals())
		exec_file("config/config.py", globals(), locals())
		globals()['database_configuration'] = locals()['database_configuration']
		globals()['server_configuration'] = locals()['server_configuration']
		globals()['routes'] = locals()['routes']

		self._port = int(globals()['server_configuration']['port'])

		# Do code generation
		table_map, reference_map = generate_models()
		generate_controllers()
		generate_layouts()
		generate_views(routes)
		generate_run(routes, table_map, reference_map)

		# Compile the application into an executable
		additional_imports = get_link_files()
		result = ""
		result += pexpect.run("gcc -g -c db.c -o db.o")
		result += pexpect.run("ar rcs db.a db.o")
		command = "ldc -g -of run " + \
					"language_helper.d helper.d rootintootin.d rootintootin_server.d http_server.d tcp_server.d ui.d run.d " + \
					"db.d db.a " + \
					str.join(' ', additional_imports) + \
					" -L=\"-lmysqlclient\""
		result += pexpect.run(command)

		if len(result) != 0:
			print result
			return
		else:
			print "Build successful!"

		# Run the real server in its own process
		# FIXME: We need to kill this process if it already running
		# And kill it when the buffer starts
		os.system(scratch + "run" + " &")

# Start the buffer server
server = BufferServer()
server.start()





